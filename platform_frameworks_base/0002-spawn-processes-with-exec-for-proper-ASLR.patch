From eb00f8dff5dfb4ac080540a9179dca30b48cca28 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Sat, 14 Mar 2015 18:10:20 -0400
Subject: [PATCH 02/17] spawn processes with exec for proper ASLR

Change-Id: I73f29debb581aeea117e5948aaccaf9837f7f82a
---
 core/java/com/android/internal/os/ExecInit.java    | 93 ++++++++++++++++++++++
 core/java/com/android/internal/os/RuntimeInit.java | 17 ++++
 .../com/android/internal/os/ZygoteConnection.java  |  4 +-
 .../java/com/android/server/AssetAtlasService.java |  2 +-
 4 files changed, 113 insertions(+), 3 deletions(-)
 create mode 100644 core/java/com/android/internal/os/ExecInit.java

diff --git a/core/java/com/android/internal/os/ExecInit.java b/core/java/com/android/internal/os/ExecInit.java
new file mode 100644
index 0000000..763e09b
--- /dev/null
+++ b/core/java/com/android/internal/os/ExecInit.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.os;
+
+import dalvik.system.VMRuntime;
+import android.system.ErrnoException;
+import android.system.Os;
+
+/**
+ * Startup class for the process.
+ * @hide
+ */
+public class ExecInit {
+    /**
+     * Class not instantiable.
+     */
+    private ExecInit() {
+    }
+
+    /**
+     * The main function called when starting a runtime application.
+     *
+     * The first argument is the target SDK version for the app.
+     *
+     * The remaining arguments are passed to the runtime.
+     *
+     * @param args The command-line arguments.
+     */
+    public static void main(String[] args) {
+        try {
+            // Parse our mandatory argument.
+            int targetSdkVersion = Integer.parseInt(args[0], 10);
+
+            // Mimic Zygote preloading.
+            ZygoteInit.preload();
+
+            // Launch the application.
+            String[] runtimeArgs = new String[args.length - 1];
+            System.arraycopy(args, 1, runtimeArgs, 0, runtimeArgs.length);
+            RuntimeInit.execInit(targetSdkVersion, runtimeArgs);
+        } catch (ZygoteInit.MethodAndArgsCaller caller) {
+            caller.run();
+        }
+    }
+
+    /**
+     * Executes a runtime application.
+     * This method never returns.
+     *
+     * @param niceName The nice name for the application, or null if none.
+     * @param targetSdkVersion The target SDK version for the app.
+     * @param args Arguments for {@link RuntimeInit#main}.
+     */
+    public static void execApplication(String niceName, int targetSdkVersion,
+            String instructionSet, String[] args) {
+        int niceArgs = niceName == null ? 0 : 1;
+        int baseArgs = 5 + niceArgs;
+        String[] argv = new String[baseArgs + args.length];
+        if (VMRuntime.is64BitInstructionSet(instructionSet)) {
+            argv[0] = "/system/bin/app_process64";
+        } else {
+            argv[0] = "/system/bin/app_process32";
+        }
+        argv[1] = "/system/bin";
+        argv[2] = "--application";
+        if (niceName != null) {
+            argv[3] = "--nice-name=" + niceName;
+        }
+        argv[3 + niceArgs] = "com.android.internal.os.ExecInit";
+        argv[4 + niceArgs] = Integer.toString(targetSdkVersion);
+        System.arraycopy(args, 0, argv, baseArgs, args.length);
+
+        try {
+            Os.execv(argv[0], argv);
+        } catch (ErrnoException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/core/java/com/android/internal/os/RuntimeInit.java b/core/java/com/android/internal/os/RuntimeInit.java
index fff9d7c..2dac04c 100644
--- a/core/java/com/android/internal/os/RuntimeInit.java
+++ b/core/java/com/android/internal/os/RuntimeInit.java
@@ -307,6 +307,23 @@ public class RuntimeInit {
         applicationInit(targetSdkVersion, argv, null);
     }
 
+    /**
+     * The main function called when an application is started via exec.
+     *
+     * When the process starts, the runtime starts {@link RuntimeInit#main}
+     * which calls {@link ExecInit#main} which then calls this method.
+     * So we don't need to call commonInit() here.
+     *
+     * @param targetSdkVersion target SDK version
+     * @param argv arg strings
+     */
+    public static void execInit(int targetSdkVersion, String[] argv)
+            throws ZygoteInit.MethodAndArgsCaller {
+        if (DEBUG) Slog.d(TAG, "RuntimeInit: Starting application from zygote with exec");
+
+        applicationInit(targetSdkVersion, argv, null);
+    }
+
     private static void applicationInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)
             throws ZygoteInit.MethodAndArgsCaller {
         // If the application calls System.exit(), terminate the process
diff --git a/core/java/com/android/internal/os/ZygoteConnection.java b/core/java/com/android/internal/os/ZygoteConnection.java
index 85d84bb..1b18014 100644
--- a/core/java/com/android/internal/os/ZygoteConnection.java
+++ b/core/java/com/android/internal/os/ZygoteConnection.java
@@ -754,8 +754,8 @@ class ZygoteConnection {
                     VMRuntime.getCurrentInstructionSet(),
                     pipeFd, parsedArgs.remainingArgs);
         } else {
-            RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,
-                    parsedArgs.remainingArgs, null /* classLoader */);
+            ExecInit.execApplication(parsedArgs.niceName, parsedArgs.targetSdkVersion,
+                    VMRuntime.getCurrentInstructionSet(), parsedArgs.remainingArgs);
         }
     }
 
diff --git a/services/core/java/com/android/server/AssetAtlasService.java b/services/core/java/com/android/server/AssetAtlasService.java
index b0f6048..7772512 100644
--- a/services/core/java/com/android/server/AssetAtlasService.java
+++ b/services/core/java/com/android/server/AssetAtlasService.java
@@ -334,7 +334,7 @@ public class AssetAtlasService extends IAssetAtlas.Stub {
 
     @Override
     public boolean isCompatible(int ppid) {
-        return ppid == android.os.Process.myPpid();
+        return false;
     }
 
     @Override
-- 
2.10.0

