this is a hack I came up with to do a partial merge of AppOppsXposed 
plugin into PrivacyGaurd/AppOpps in CM. Reason:

Xposed framework cannot work on roms that are using the exec/fork 
spawning model; found in CopperheadOS (my CM rom uses this). Xposed 
relies on Zygote being the parent process of every other process, 
in order to be able to hook into them and modify their behavior.
however, this simply breaks when using the traditional 
unix exec/fork spwaning model.

Therefore, this patch replicates most of the same functionality as
I would get from having AppOppXposed, without needing Xposed. 
Beyond my own use, this could be useful to people not wanting to 
use Xposed but like this particular plugin/feature. 

With this patch enabled, you can launch the AppOpps activity and you 
will be able to see what all of the system apps permissions are AND
it will also expose permissions that Cyanogenmod normally hides.

johnstonljordan@gmail.com <author>

diff -Nur a/src/com/android/settings/applications/AppOpsDetails.java b/src/com/android/settings/applications/AppOpsDetails.java
--- a/src/com/android/settings/applications/AppOpsDetails.java	2016-04-08 13:40:41.290749000 -0400
+++ b/src/com/android/settings/applications/AppOpsDetails.java	2016-05-20 12:48:21.727306955 -0400
@@ -166,15 +166,15 @@
 
         mOperationsSection.removeAllViews();
         String lastPermGroup = "";
-        boolean isPlatformSigned = isPlatformSigned();
+//        boolean isPlatformSigned = isPlatformSigned();
         for (AppOpsState.OpsTemplate tpl : AppOpsState.ALL_TEMPLATES) {
-            /* If we are platform signed, only show the root switch, this
-             * one is safe to toggle while other permission-based ones could
-             * certainly cause system-wide problems
-             */
-            if (isPlatformSigned && tpl != AppOpsState.SU_TEMPLATE) {
-                 continue;
-            }
+//            /* If we are platform signed, only show the root switch, this
+//             * one is safe to toggle while other permission-based ones could
+//             * certainly cause system-wide problems
+//             */
+//            if (isPlatformSigned && tpl != AppOpsState.SU_TEMPLATE) {
+//                 continue;
+//            }
             List<AppOpsState.AppOpEntry> entries = mState.buildState(tpl,
                     mPackageInfo.applicationInfo.uid, mPackageInfo.packageName);
             for (final AppOpsState.AppOpEntry entry : entries) {
diff -Nur a/src/com/android/settings/applications/AppOpsState.java b/src/com/android/settings/applications/AppOpsState.java
--- a/src/com/android/settings/applications/AppOpsState.java	2016-01-13 12:19:40.128233000 -0500
+++ b/src/com/android/settings/applications/AppOpsState.java	2016-05-20 20:34:47.726236324 -0400
@@ -108,6 +108,7 @@
                     AppOpsManager.OP_WIFI_SCAN,
                     AppOpsManager.OP_NEIGHBORING_CELLS,
                     AppOpsManager.OP_MONITOR_LOCATION,
+                    AppOpsManager.OP_MOCK_LOCATION,
                     AppOpsManager.OP_MONITOR_HIGH_POWER_LOCATION },
             new boolean[] { true,
                     true,
@@ -115,6 +116,7 @@
                     false,
                     false,
                     false,
+                    true,
                     false }
             );
 
@@ -125,6 +127,13 @@
                     AppOpsManager.OP_WRITE_CALL_LOG,
                     AppOpsManager.OP_READ_CALENDAR,
                     AppOpsManager.OP_WRITE_CALENDAR,
+                    AppOpsManager.OP_READ_PHONE_STATE,
+                    AppOpsManager.OP_PROCESS_OUTGOING_CALLS,
+                    AppOpsManager.OP_USE_FINGERPRINT,
+                    AppOpsManager.OP_BODY_SENSORS,
+                    AppOpsManager.OP_READ_EXTERNAL_STORAGE,
+                    AppOpsManager.OP_WRITE_EXTERNAL_STORAGE,
+                    AppOpsManager.OP_GET_ACCOUNTS,
                     AppOpsManager.OP_READ_CLIPBOARD,
                     AppOpsManager.OP_WRITE_CLIPBOARD },
             new boolean[] { true,
@@ -133,6 +142,13 @@
                     true,
                     true,
                     true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
                     false,
                     false }
             );
@@ -172,6 +188,9 @@
                     AppOpsManager.OP_AUDIO_ALARM_VOLUME,
                     AppOpsManager.OP_AUDIO_NOTIFICATION_VOLUME,
                     AppOpsManager.OP_AUDIO_BLUETOOTH_VOLUME,
+                    AppOpsManager.OP_WRITE_WALLPAPER,
+                    AppOpsManager.OP_ASSIST_SCREENSHOT,
+                    AppOpsManager.OP_ASSIST_STRUCTURE,
                     AppOpsManager.OP_MUTE_MICROPHONE },
             new boolean[] { false,
                     true,
@@ -186,6 +205,9 @@
                     false,
                     false,
                     false,
+                    true,
+                    true,
+                    true,
                     false }
             );
 
@@ -193,6 +215,10 @@
             new int[] { AppOpsManager.OP_POST_NOTIFICATION,
                     AppOpsManager.OP_ACCESS_NOTIFICATIONS,
                     AppOpsManager.OP_CALL_PHONE,
+                    AppOpsManager.OP_ADD_VOICEMAIL,
+                    AppOpsManager.OP_USE_SIP,
+                    AppOpsManager.OP_READ_CELL_BROADCASTS,
+                    AppOpsManager.OP_TURN_SCREEN_ON,
                     AppOpsManager.OP_WRITE_SETTINGS,
                     AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                     AppOpsManager.OP_WAKE_LOCK,
@@ -203,17 +229,27 @@
                     AppOpsManager.OP_WIFI_CHANGE,
                     AppOpsManager.OP_BLUETOOTH_CHANGE,
                     AppOpsManager.OP_NFC_CHANGE,
-                    AppOpsManager.OP_DATA_CONNECT_CHANGE },
+                    AppOpsManager.OP_DATA_CONNECT_CHANGE,
+                    AppOpsManager.OP_PROJECT_MEDIA,
+                    AppOpsManager.OP_ACTIVATE_VPN,
+                    AppOpsManager.OP_GET_USAGE_STATS, },
             new boolean[] { false,
                     true,
                     true,
                     true,
                     true,
                     true,
-                    false,
-                    false,
-                    false,
-                    false,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
+                    true,
                     true,
                     true,
                     true,
@@ -249,6 +285,7 @@
         private String mLabel;
         private Drawable mIcon;
         private boolean mMounted;
+        private boolean mHasDisallowedOps = false;
 
         public AppEntry(AppOpsState state, ApplicationInfo info) {
             mState = state;
@@ -258,6 +295,7 @@
 
         public void addOp(AppOpEntry entry, AppOpsManager.OpEntry op) {
             mOps.put(op.getOp(), op);
+            mHasDisallowedOps |= op.getMode() != AppOpsManager.MODE_ALLOWED;
             mOpSwitches.put(AppOpsManager.opToSwitch(op.getOp()), entry);
         }
 
@@ -387,6 +425,10 @@
             return mOps.get(pos);
         }
 
+        public boolean hasDisallowedOps() {
+            return mApp.mHasDisallowedOps;
+        }
+
         private CharSequence getCombinedText(ArrayList<AppOpsManager.OpEntry> ops,
                 CharSequence[] items, Resources res, boolean withTerseCounts) {
             StringBuilder builder = new StringBuilder();
@@ -488,6 +530,10 @@
                 // More recent times go first.
                 return object1.getTime() > object2.getTime() ? -1 : 1;
             }
+            if (object1.hasDisallowedOps() != object2.hasDisallowedOps()) {
+                // Disallowed ops go first.
+                return object1.hasDisallowedOps() ? -1 : 1;
+            }
             return sCollator.compare(object1.getAppEntry().getLabel(),
                     object2.getAppEntry().getLabel());
         }
@@ -552,6 +598,16 @@
 
         AppEntry appEntry = appEntries.get(packageName);
         if (appEntry == null) {
+            if (appInfo == null) {
+                try {
+                    appInfo = mPm.getApplicationInfo(packageName,
+                            PackageManager.GET_DISABLED_COMPONENTS
+                            | PackageManager.GET_UNINSTALLED_PACKAGES);
+                } catch (PackageManager.NameNotFoundException e) {
+                    Log.w(TAG, "Unable to find info for package " + packageName);
+                    return null;
+                }
+            }
             appEntry = new AppEntry(this, appInfo);
             appEntry.loadLabel(context);
             appEntries.put(packageName, appEntry);
