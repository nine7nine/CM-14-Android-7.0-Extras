From 6c8aa313dca930f58d247f23769285c0cfb5c343 Mon Sep 17 00:00:00 2001
From: mickybart <mickybart@pygoscelis.org>
Date: Sat, 21 Feb 2015 12:32:09 -0500
Subject: [PATCH] arch: USB Fast Charge support

---
 arch/arm/mach-msm/Kconfig    |  7 ++++
 arch/arm/mach-msm/Makefile   |  2 +
 arch/arm/mach-msm/fastchg.c  | 87 ++++++++++++++++++++++++++++++++++++++++++++
 drivers/usb/otg/msm72k_otg.c | 23 +++++++++++-
 include/linux/fastchg.h      | 23 ++++++++++++
 5 files changed, 141 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/mach-msm/fastchg.c
 create mode 100644 include/linux/fastchg.h

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index 4adac4c..e1ea580 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -1632,6 +1632,13 @@ config MSM_DALRPC_TEST
 	help
 	  Exercises DAL RPC calls to QDSP6.
 
+config FORCE_FAST_CHARGE
+	bool "Force AC charge mode at will"
+	default n
+	help
+	  A simple sysfs interface to force adapters that
+	  are detected as USB to charge as AC.
+
 if CPU_FREQ_MSM
 
 config MSM_CPU_FREQ_SET_MIN_MAX
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index 45255bdb..6b0bff6 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -465,6 +465,8 @@
 obj-$(CONFIG_MSM_EBI_ERP) += ebi_erp.o
 obj-$(CONFIG_MSM_CACHE_DUMP) += msm_cache_dump.o
 
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
+
 obj-$(CONFIG_MSM_HSIC_SYSMON) += hsic_sysmon.o
 obj-$(CONFIG_MSM_HSIC_SYSMON_TEST) += hsic_sysmon_test.o
 
diff --git a/arch/arm/mach-msm/fastchg.c b/arch/arm/mach-msm/fastchg.c
new file mode 100644
index 0000000..a50ba08
--- /dev/null
+++ b/arch/arm/mach-msm/fastchg.c
@@ -0,0 +1,87 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * Simple port to Nexus 4 : motley <motley.slate@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*
+ * Possible values for "force_fast_charge" are :
+ *
+ *   0 - disabled (default)
+ *   1 - substitute AC to USB unconditional
+*/
+
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/fastchg.h>
+
+int force_fast_charge;
+
+/* sysfs interface for "force_fast_charge" */
+static ssize_t force_fast_charge_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf) {
+	return sprintf(buf, "%d\n", force_fast_charge);
+}
+
+static ssize_t force_fast_charge_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count) {
+	int new_force_fast_charge;
+
+	sscanf(buf, "%du", &new_force_fast_charge);
+
+	if (new_force_fast_charge >= FAST_CHARGE_DISABLED && new_force_fast_charge <= FAST_CHARGE_FORCE_AC) {
+		/* update only if valid value provided */
+		force_fast_charge = new_force_fast_charge;
+	}
+
+	return count;
+}
+
+static struct kobj_attribute force_fast_charge_attribute =
+	__ATTR(force_fast_charge, 0666, force_fast_charge_show, force_fast_charge_store);
+
+static struct attribute *force_fast_charge_attrs[] = {
+	&force_fast_charge_attribute.attr,
+	NULL,
+};
+
+static struct attribute_group force_fast_charge_attr_group = {
+	.attrs = force_fast_charge_attrs,
+};
+
+/* Initialize fast charge sysfs folder */
+static struct kobject *force_fast_charge_kobj;
+
+int force_fast_charge_init(void) {
+	int force_fast_charge_retval;
+
+	force_fast_charge = FAST_CHARGE_DISABLED; /* Forced fast charge disabled by default */
+
+	force_fast_charge_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
+	if (!force_fast_charge_kobj) {
+		return -ENOMEM;
+	}
+
+	force_fast_charge_retval = sysfs_create_group(force_fast_charge_kobj, &force_fast_charge_attr_group);
+
+	if (force_fast_charge_retval)
+		kobject_put(force_fast_charge_kobj);
+
+	return (force_fast_charge_retval);
+}
+
+void force_fast_charge_exit(void) {
+	kobject_put(force_fast_charge_kobj);
+}
+
+module_init(force_fast_charge_init);
+module_exit(force_fast_charge_exit);
+
diff --git a/drivers/usb/otg/msm72k_otg.c b/drivers/usb/otg/msm72k_otg.c
index feea6ff..d3575f8 100644
--- a/drivers/usb/otg/msm72k_otg.c
+++ b/drivers/usb/otg/msm72k_otg.c
@@ -37,6 +37,11 @@
 #ifdef CONFIG_USB_HOST_EXTRA_NOTIFICATION
 #include <linux/usb/host_ext_event.h>
 #endif
+ 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#define USB_FASTCHG_LOAD 1000 /* uA */
+#endif
 
 #define MSM_USB_BASE	(dev->regs)
 #define USB_LINK_RESET_TIMEOUT	(msecs_to_jiffies(10))
@@ -610,7 +615,23 @@ static int msm_otg_set_power(struct usb_phy *xceiv, unsigned mA)
 	else if (pdata->chg_drawable_ida && test_bit(ID_A, &dev->inputs))
 		charge = pdata->chg_drawable_ida;
 
-	pr_debug("Charging with %dmA current\n", charge);
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (force_fast_charge == 1) {
+		/* don't override charging current if available current is greater /*
+		if (charge >= USB_FASTCHG_LOAD) {
+			pr_info("Available current already greater than USB fastcharging current.\n");
+			pr_info("Override of USB charging current cancelled.\n");
+		} else {
+			charge = USB_FASTCHG_LOAD;
+			pr_info("USB fast charging is ON.\n");
+		}
+		
+	} else {
+		pr_info("USB fast charging is OFF.\n");
+	}
+#endif
+
+	pr_info("Charging with %dmA current\n", charge);
 	/* Call vbus_draw only if the charger is of known type and also
 	 * ignore request to stop charging as a result of suspend interrupt
 	 * when wall-charger is used.
diff --git a/include/linux/fastchg.h b/include/linux/fastchg.h
new file mode 100644
index 0000000..0570e03
--- /dev/null
+++ b/include/linux/fastchg.h
@@ -0,0 +1,23 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_FASTCHG_H
+#define _LINUX_FASTCHG_H
+
+extern int force_fast_charge;
+
+#define FAST_CHARGE_DISABLED 0	/* default */
+#define FAST_CHARGE_FORCE_AC 1
+
+#endif

