From 72f2f1934d134e754bdc500883145154fbcbd7d4 Mon Sep 17 00:00:00 2001
From: Klozz <xxx.reptar.rawrr.xxx@gmail.com>
Date: Wed, 8 Jul 2015 09:57:49 +0530
Subject: [PATCH] =?UTF-8?q?Enhance=20power=20efficiency:=20Series=20of=20p?=
 =?UTF-8?q?atches=20from=20NVIDIA=20on=20some=20criti=E2=80=A6=20=E2=80=A6?=
 =?UTF-8?q?cal=20blocking=20code=20paths=20to=20allow=20the=20CPU=20to=20r?=
 =?UTF-8?q?elax=20instead=20of=20busy=20spinning=20thus=20lowering=20the?=
 =?UTF-8?q?=20load=5Faverage=20and=20lowering=20power=20consumption.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: klozz <xxx.reptar.rawrr.xxx@gmail.com>

Conflicts:
	kernel/sched/core.c

Change-Id: I9d1752a29f6c7448d64284ac1acd2c3f70d240b8
---
 arch/arm/include/asm/atomic.h    |  1 +
 arch/arm/include/asm/processor.h |  4 ++++
 arch/arm/include/asm/relaxed.h   | 20 ++++++++++++++++++++
 include/asm-generic/processor.h  | 24 ++++++++++++++++++++++++
 include/asm-generic/relaxed.h    | 30 ++++++++++++++++++++++++++++++
 include/linux/hrtimer.h          |  7 +++++++
 include/linux/llist.h            |  6 ++++++
 include/linux/sched.h            |  1 +
 include/linux/seqlock.h          |  5 +++--
 kernel/cpu.c                     |  4 ++--
 kernel/sched/core.c              | 28 +++++++++++++++++++++++++---
 kernel/smp.c                     |  4 ++--
 12 files changed, 125 insertions(+), 9 deletions(-)
 create mode 100644 arch/arm/include/asm/relaxed.h
 create mode 100644 include/asm-generic/processor.h
 create mode 100644 include/asm-generic/relaxed.h

diff --git a/arch/arm/include/asm/atomic.h b/arch/arm/include/asm/atomic.h
index 68374ba..ddfcc3c 100644
--- a/arch/arm/include/asm/atomic.h
+++ b/arch/arm/include/asm/atomic.h
@@ -28,6 +28,7 @@
  */
 #define atomic_read(v)	(*(volatile int *)&(v)->counter)
 #define atomic_set(v,i)	(((v)->counter) = (i))
+#define cpu_relaxed_read_atomic(v) atomic_read(v)
 
 #if __LINUX_ARM_ARCH__ >= 6
 
diff --git a/arch/arm/include/asm/processor.h b/arch/arm/include/asm/processor.h
index 07209d7..a0a8bab 100644
--- a/arch/arm/include/asm/processor.h
+++ b/arch/arm/include/asm/processor.h
@@ -2,6 +2,8 @@
  *  arch/arm/include/asm/processor.h
  *
  *  Copyright (C) 1995-1999 Russell King
+ * 
+ * Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -130,4 +132,6 @@ static inline void prefetch(const void *ptr)
 
 #endif
 
+#include <asm-generic/processor.h>
+
 #endif /* __ASM_ARM_PROCESSOR_H */
diff --git a/arch/arm/include/asm/relaxed.h b/arch/arm/include/asm/relaxed.h
new file mode 100644
index 0000000..4417aed
--- /dev/null
+++ b/arch/arm/include/asm/relaxed.h
@@ -0,0 +1,20 @@
+/*
+ * arm/include/asm/relaxed.h
+ *
+ * Copyright (c) 2014 NVIDIA Corporation. All rights reserved.
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _ASM_RELAXED_H_
+#define _ASM_RELAXED_H_
+
+#include <asm-generic/relaxed.h>
+
+#endif /*_ASM_RELAXED_H_*/
\ No newline at end of file
diff --git a/include/asm-generic/processor.h b/include/asm-generic/processor.h
new file mode 100644
index 0000000..b474678
--- /dev/null
+++ b/include/asm-generic/processor.h
@@ -0,0 +1,24 @@
+/*
+ * include/asm-generic/processor.h
+ *
+ * Copyright (c) 2014 NVIDIA Corporation. All rights reserved.
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _ASM_GENERIC_PROCESSOR_H_
+#define _ASM_GENERIC_PROCESSOR_H_
+
+#include <asm-generic/relaxed.h>
+
+#ifndef cpu_read_relax
+#define cpu_read_relax() cpu_relax()
+#endif
+
+#endif /*_ASM_GENERIC_PROCESSOR_H_*/
\ No newline at end of file
diff --git a/include/asm-generic/relaxed.h b/include/asm-generic/relaxed.h
new file mode 100644
index 0000000..54a0901
--- /dev/null
+++ b/include/asm-generic/relaxed.h
@@ -0,0 +1,30 @@
+/*
+ * include/asm-generic/relaxed.h
+ *
+ * Copyright (c) 2014 NVIDIA Corporation. All rights reserved.
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _ASM_GENERIC_RELAXED_H_
+#define _ASM_GENERIC_RELAXED_H_
+
+#ifndef cpu_relaxed_read_short
+#define cpu_relaxed_read_short(p)	(*(p))
+#endif
+
+#ifndef cpu_relaxed_read
+#define cpu_relaxed_read(p)		(*(p))
+#endif
+
+#ifndef cpu_relaxed_read_long
+#define cpu_relaxed_read_long(p)	(*(p))
+#endif
+
+#endif /*_ASM_GENERIC_RELAXED_H_*/
\ No newline at end of file
diff --git a/include/linux/hrtimer.h b/include/linux/hrtimer.h
index fd0dc30..94ce167 100644
--- a/include/linux/hrtimer.h
+++ b/include/linux/hrtimer.h
@@ -5,6 +5,7 @@
  *
  *   Copyright(C) 2005, Thomas Gleixner <tglx@linutronix.de>
  *   Copyright(C) 2005, Red Hat, Inc., Ingo Molnar
+ *  Copyright (C) 2014, NVIDIA CORPORATION. All rights reserved.
  *
  *  data type definitions, declarations, prototypes
  *
@@ -23,6 +24,7 @@
 #include <linux/percpu.h>
 #include <linux/timer.h>
 #include <linux/timerqueue.h>
+#include <asm/relaxed.h>
 
 struct hrtimer_clock_base;
 struct hrtimer_cpu_base;
@@ -407,6 +409,11 @@ static inline int hrtimer_callback_running(struct hrtimer *timer)
 	return timer->state & HRTIMER_STATE_CALLBACK;
 }
 
+static inline int hrtimer_callback_running_relaxed(struct hrtimer *timer)
+{
+	return cpu_relaxed_read_long(&timer->state) & HRTIMER_STATE_CALLBACK;
+}
+
 /* Forward a hrtimer so it expires after now: */
 extern u64
 hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
diff --git a/include/linux/llist.h b/include/linux/llist.h
index a5199f6..30019d8 100644
--- a/include/linux/llist.h
+++ b/include/linux/llist.h
@@ -57,6 +57,7 @@
 
 #include <linux/kernel.h>
 #include <asm/cmpxchg.h>
+#include <asm/relaxed.h>
 
 struct llist_head {
 	struct llist_node *first;
@@ -137,6 +138,11 @@ static inline bool llist_empty(const struct llist_head *head)
 	return ACCESS_ONCE(head->first) == NULL;
 }
 
+static inline bool llist_empty_relaxed(const struct llist_head *head)
+{
+	return (void *)cpu_relaxed_read_long(&head->first) == NULL;
+}
+
 static inline struct llist_node *llist_next(struct llist_node *node)
 {
 	return node->next;
diff --git a/include/linux/sched.h b/include/linux/sched.h
index a202096..75fae08 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -2132,6 +2132,7 @@ extern int task_nice(const struct task_struct *p);
 extern int can_nice(const struct task_struct *p, const int nice);
 extern int task_curr(const struct task_struct *p);
 extern int idle_cpu(int cpu);
+extern int idle_cpu_relaxed(int cpu);
 extern int sched_setscheduler(struct task_struct *, int,
 			      const struct sched_param *);
 extern int sched_setscheduler_nocheck(struct task_struct *, int,
diff --git a/include/linux/seqlock.h b/include/linux/seqlock.h
index 600060e2..08f342d 100644
--- a/include/linux/seqlock.h
+++ b/include/linux/seqlock.h
@@ -29,6 +29,7 @@
 #include <linux/spinlock.h>
 #include <linux/preempt.h>
 #include <asm/processor.h>
+#include <asm/relaxed.h>
 
 typedef struct {
 	unsigned sequence;
@@ -141,9 +142,9 @@ static inline unsigned __read_seqcount_begin(const seqcount_t *s)
 	unsigned ret;
 
 repeat:
-	ret = ACCESS_ONCE(s->sequence);
+	ret = cpu_relaxed_read((volatile u32 *)&s->sequence);
 	if (unlikely(ret & 1)) {
-		cpu_relax();
+		cpu_read_relax();
 		goto repeat;
 	}
 	return ret;
diff --git a/kernel/cpu.c b/kernel/cpu.c
index a3e1191..bfd7a81 100644
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -256,8 +256,8 @@ static int __ref _cpu_down(unsigned int cpu, int tasks_frozen)
 	 *
 	 * Wait for the stop thread to go away.
 	 */
-	while (!idle_cpu(cpu))
-		cpu_relax();
+	while (!idle_cpu_relaxed(cpu))
+		cpu_read_relax();
 
 	/* This actually kills the CPU. */
 	__cpu_die(cpu);
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 6858747..ec8dedf 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -5,6 +5,8 @@
  *
  *  Copyright (C) 1991-2002  Linus Torvalds
  *
+ * Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
+ * 
  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and
  *		make semaphores SMP safe
  *  1998-11-19	Implemented schedule_timeout() and related stuff
@@ -77,6 +79,7 @@
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
 #include <asm/mutex.h>
+#include <asm/relaxed.h>
 #ifdef CONFIG_PARAVIRT
 #include <asm/paravirt.h>
 #endif
@@ -1177,9 +1180,10 @@ unsigned long wait_task_inactive(struct task_struct *p, long match_state)
 		 * is actually now running somewhere else!
 		 */
 		while (task_running(rq, p)) {
-			if (match_state && unlikely(p->state != match_state))
+			if (match_state && unlikely(cpu_relaxed_read_long
+			    (&(p->state)) != match_state))
 				return 0;
-			cpu_relax();
+			cpu_read_relax();
 		}
 
 		/*
@@ -1621,7 +1625,7 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 		if (ttwu_activate_remote(p, wake_flags))
 			goto stat;
 #else
-		cpu_relax();
+		cpu_read_relax();
 #endif
 	}
 	/*
@@ -4139,6 +4143,24 @@ int idle_cpu(int cpu)
 	return 1;
 }
 
+int idle_cpu_relaxed(int cpu)
+{
+      struct rq *rq = cpu_rq(cpu);
+
+      if (cpu_relaxed_read_long(&rq->curr) != rq->idle)
+             return 0;
+
+      if (cpu_relaxed_read_long(&rq->nr_running))
+             return 0;
+
+#ifdef CONFIG_SMP
+      if (!llist_empty_relaxed(&rq->wake_list))
+             return 0;
+#endif
+
+             return 1;
+}
+
 /**
  * idle_task - return the idle task for a given cpu.
  * @cpu: the processor in question.
diff --git a/kernel/smp.c b/kernel/smp.c
index d5f3238..ffb4e43 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -104,8 +104,8 @@ void __init call_function_init(void)
  */
 static void csd_lock_wait(struct call_single_data *data)
 {
-	while (data->flags & CSD_FLAG_LOCK)
-		cpu_relax();
+	while (cpu_relaxed_read_short(&data->flags) & CSD_FLAG_LOCK)
+		cpu_read_relax();
 }
 
 static void csd_lock(struct call_single_data *data)

