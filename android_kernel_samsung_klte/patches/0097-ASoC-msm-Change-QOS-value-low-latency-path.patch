From 83afa06aa53bb8209c0bb9374af62f2ee0ee17aa Mon Sep 17 00:00:00 2001
From: Mekala Natarajan <mekalan@codeaurora.org>
Date: Wed, 24 Apr 2013 15:36:52 -0700
Subject: [PATCH 097/517] ASoC: msm: Change QOS value for low latency path

There were variations in the time taken to
return from each write. This was due
to the delay in switching in and out of
power collapse. To manage this set QOS
value to 1ms so that the core has enough
time to wake up from power collapse

Signed-off-by: Alexy Joseph <alexyj@codeaurora.org>
Signed-off-by: Mekala Natarajan <mekalan@codeaurora.org>
Signed-off-by: Francisco Franco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 sound/soc/msm/msm-lowlatency-pcm-q6.c |   40 ++++++++++++++++++++++++++++++++-
 1 file changed, 39 insertions(+), 1 deletion(-)

diff --git a/sound/soc/msm/msm-lowlatency-pcm-q6.c b/sound/soc/msm/msm-lowlatency-pcm-q6.c
index 81ae27d..c9812ae 100644
--- a/sound/soc/msm/msm-lowlatency-pcm-q6.c
+++ b/sound/soc/msm/msm-lowlatency-pcm-q6.c
@@ -33,7 +33,13 @@
 #include "msm-pcm-routing.h"
 
 static struct audio_locks the_locks;
-
+#define ENABLE_QOS
+#ifdef ENABLE_QOS
+#define LOW_LATENCY_QOS_SETTING_USECS 1000
+/* FIXME move this to private structure */
+static struct pm_qos_request lpm_qos_req;
+static bool first_time = true;
+#endif
 struct snd_msm {
 	struct snd_card *card;
 	struct snd_pcm *pcm;
@@ -350,6 +356,10 @@ static int msm_pcm_open(struct snd_pcm_substream *substream)
 			kfree(prtd);
 			return -ENOMEM;
 		}
+#ifdef ENABLE_QOS
+		first_time = true;
+		pr_debug("going to enable pm_qos low latency\n");
+#endif
 	}
 	/* Capture path */
 	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
@@ -428,6 +438,15 @@ static int msm_pcm_playback_copy(struct snd_pcm_substream *substream, int a,
 
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct msm_audio *prtd = runtime->private_data;
+#ifdef ENABLE_QOS
+	if (first_time) {
+		int usecs = LOW_LATENCY_QOS_SETTING_USECS;
+		pr_info("setting pm_qos in %s with %d\n", __func__, usecs);
+		pm_qos_update_request(&lpm_qos_req, usecs);
+		pr_info("done setting pm_qos in %s\n", __func__);
+		first_time = false;
+	}
+#endif
 
 	fbytes = frames_to_bytes(runtime, frames);
 	pr_debug("%s: prtd->out_count = %d\n",
@@ -483,6 +502,14 @@ static int msm_pcm_playback_close(struct snd_pcm_substream *substream)
 	int ret = 0;
 
 	pr_debug("%s\n", __func__);
+#ifdef ENABLE_QOS
+	{
+		int usecs = PM_QOS_DEFAULT_VALUE;
+		pr_info("updating pm_qos value to default %s\n", __func__);
+		pm_qos_update_request(&lpm_qos_req, usecs);
+		pr_info("done updating pm_qos value to default %s\n", __func__);
+	}
+#endif
 
 	dir = IN;
 	ret = wait_event_timeout(the_locks.eos_wait,
@@ -736,12 +763,23 @@ static struct snd_soc_platform_driver msm_soc_platform = {
 static __devinit int msm_pcm_probe(struct platform_device *pdev)
 {
 	pr_info("%s: dev name %s\n", __func__, dev_name(&pdev->dev));
+#ifdef ENABLE_QOS
+	pr_info("adding pm_qos request in low latency driver\n");
+	pm_qos_add_request(&lpm_qos_req, PM_QOS_CPU_DMA_LATENCY,
+			PM_QOS_DEFAULT_VALUE);
+	pr_info("done adding pm_qos request in low latency driver\n");
+#endif
 	return snd_soc_register_platform(&pdev->dev,
 				   &msm_soc_platform);
 }
 
 static int msm_pcm_remove(struct platform_device *pdev)
 {
+#ifdef ENABLE_QOS
+	pr_info("removing request from low latency driver\n");
+	pm_qos_remove_request(&lpm_qos_req);
+	pr_info("done removing request from low latency driver\n");
+#endif
 	snd_soc_unregister_platform(&pdev->dev);
 	return 0;
 }
-- 
1.7.9.5

